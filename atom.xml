<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sky`s Blog</title>
  
  
  <link href="https://www.flamingo-sky.com/atom.xml" rel="self"/>
  
  <link href="https://www.flamingo-sky.com/"/>
  <updated>2022-02-14T23:03:14.690Z</updated>
  <id>https://www.flamingo-sky.com/</id>
  
  <author>
    <name>Sky</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zookeeper协议、服务器角色及启动、leader选举</title>
    <link href="https://www.flamingo-sky.com/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/"/>
    <id>https://www.flamingo-sky.com/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/</id>
    <published>2022-02-14T22:56:54.000Z</published>
    <updated>2022-02-14T23:03:14.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Zookeeper协议、服务器角色及启动、leader选举"><a href="#Zookeeper协议、服务器角色及启动、leader选举" class="headerlink" title="Zookeeper协议、服务器角色及启动、leader选举"></a>Zookeeper协议、服务器角色及启动、leader选举</h1><h3 id="一-ZAB协议"><a href="#一-ZAB协议" class="headerlink" title="一.ZAB协议"></a>一.ZAB协议</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h4><p>Zookeeper是使用的Zookeeper Atomic Broadcast（ZAB，Zookeeper原子消息广播协议）协议作为数据一致性的核心算法，并没有完全采用paxos算法。ZAB协议是一种专门为Zookeeper设计的<strong>支持崩溃恢复的原子广播协议</strong>。</p><p>基于该协议，Zookeeper实现了一种主备模式的系统架构来保持集群中各副本之间的数据一致性。</p><p>ZAB协议的核心是定义了<strong>对于那些会改变Zookeeper服务器数据状态的事务请求的处理方式</strong>。</p><blockquote><p>即所有事务请求必须由一个全局唯一的服务器来协调处理,这样的服务器被称为<strong>Leader服务器</strong>,余下的服务器则称为<strong>Follower服务器</strong>, Leader服务器负责将一个客户端事务请求转化成一个事务Proposal (提·议) ,并将该Proposal分发给集群中所有的Follower服务器,之后Leader服务器需要等待所有Follower服务器的反馈,<strong>一旦超过半数的Follower服务器进行了正确的反馈后</strong>,那么Leader就会再次向所有的Follower服务器分发Commit消息,要求其将前一个Proposal进行提交。</p></blockquote><p><img src="/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/image-20201112211450309.png" alt="image-20201112211450309"></p><h4 id="2-ZAB协议两种基本模式"><a href="#2-ZAB协议两种基本模式" class="headerlink" title="2.ZAB协议两种基本模式"></a>2.ZAB协议两种基本模式</h4><p>ZAB协议包括两种基本模式：崩溃恢复和消息广播。</p><p><strong>进入崩溃恢复模式</strong>：</p><p>当整个服务框架启动过程中,或者是Leader服务器出现网络中断、崩溃退出或重启等异常情况时, ZAB协议就会进入崩溃恢复模式,同时选举产生新的Leader服务器。当选举产生了新的Leader服务器,同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后, ZAB协议就会退出恢复模式,其中,所谓的状态同步就是指数据同步,用来保证<strong>集群中过半的机器能够和Leader服务器的数据状态保持一致</strong>。</p><p><strong>进入消息广播模式</strong>：</p><p>当集群中已经有过半的Follower服务器完成了和Leader服务器的状态同步,那么整个服务框架就可以进入消息广播模式,当一台同样遵守ZAB协议的服务器启动后加入到集群中,如果此时集群中已经存在一个Leader服务器在负责进行消息广播,那么加入的服务器就会自觉地进入<strong>数据恢复模式:找到Leader所在的服务器,并与其进行数据同步,然后一起参与到消息广播流程中去</strong>。Zookeeper只允许唯一的一个Leader服务器来进行事务请求的处理, Leader服务器在接收到客户端的事务请求后,会生成对应的事务提议并发起一轮广播协议,而如果集群中的其他机器收到客户端的事务请求后,那么这些非Leader服务器会首先将这个事务请求转发给Leader服务器。</p><h5 id="2-1-消息广播"><a href="#2-1-消息广播" class="headerlink" title="2.1 消息广播"></a>2.1 消息广播</h5><p>ZAB协议使用原子广播协议，类似于一个二阶段提交过程，对于客户端的事务请求，Leader服务器会为其生成对应的事务Proposal,并将其发送给集群中其余所有的机器,然后再分别收集各自的选票,最后进行事务提交。</p><p><img src="/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/image-20201112213842570.png" alt="image-20201112213842570"></p><ul><li>二阶段提交过程中，移出了中断逻辑，即在过半的Follower服务器已经反馈Ack后就可以开始提交事务Proposal了；</li><li>ZAB采用崩溃恢复模式来解决因Leader服务器崩溃退出而带来的数据不一致性问题；</li><li>整个消息广播协议是基于具有FIFO特性的TCP协议来进行网络通信的，可以保证消息广播过程中消息接受与发送的顺序性。</li></ul><p>在整个消息广播过程中, Leader服务器会为每个事务请求生成对应的Proposal来进行广播,并且在广播事务Proposal之前, Leader服务器会首先为这个事务Proposal分配一个<strong>全局单调递增的唯一ID,称之为事务ID</strong> (ZXID) ,由于ZAB协议需要保证每个消息严格的因果关系,因此必须将<strong>每个事务Proposal按照其ZXID的先后顺序来进行排序和处理</strong>。</p><p>具体的过程：<strong>在消息广播过程中, Leader服务器会为每一个Follower服务器都各自分配一个单独的队列,然后将需要广播的事务Proposal依次放入这些队列中去,并且根据FIFO策略进行消息发送。每一个Follower服务器在接收到这个事务Proposal之后,都会首先将其以事务日志的形式写入到本地磁盘中去,并且在成功写入后反馈给Leader服务器一个Ack响应。当Leader服务器接收到超过半数Follower的Ack响应后,就会广播一个Commit消息给所有的Follower服务器以通知其进行事务提交,同时Leader自身也会完成对事务的提交,而每一个Follower服务器在接收到Commit消息后,也会完成对事务的提交</strong>。</p><h5 id="2-2-崩溃恢复"><a href="#2-2-崩溃恢复" class="headerlink" title="2.2 崩溃恢复"></a>2.2 崩溃恢复</h5><p>一旦在Leader服务器出现崩溃，或者由于网络原因导致Leader服务器失去了过半Follower的联系，就会进入崩溃恢复模式。整个恢复过程结束后需要选举一个新的Leader服务器，因此，ZAB协议就需要一个高效且可靠的Leader选举算法来保证快速的选出新的Leader。</p><p><strong>基本特性</strong></p><p>ZAB协议规定了如果一个事务Proposal在一台机器上被处理成功,那么应该在所有的机器上都被处理成功,哪怕机器出现故障崩溃。</p><ol><li>ZAB协议需要确保那些已经在Leader服务器上提交的事务最终被所有服务器都提交;</li><li>ZAB协议需要确保丢弃那些只在Leader服务器上被提出的事务。</li></ol><p>ZAB协议必须设计这样一个Leader选举算法：<strong>能够确保提交已经被Leader提交的事务Proposal,同时丢弃已经被跳过的事务Proposal</strong>。针对这个要求,如果让Leader选举算法能够<strong>保证新选举出来的Leader服务器拥有集群中所有机器最高编号(即ZXID最大)的事务Proposal</strong>,那么就可以保证这个新选举出来的Leader一定具有所有已经提交的提案。如果让具有最高编号事务Proposal的机器来成为Leader,就可以省去Leader服务器检查Proposal的提交和丢弃工作的这一步操作了。</p><p><strong>数据同步</strong></p><p>完成Leader选举之后,在正式开始工作(即接收客户端的事务请求,然后提出新的提案)之前,Leader服务器会首先确认事务日志中的所有Proposal是否都已经被集群中过半的机器提交了,即是否完成数据同步。下面我们就来看看ZAB协议的数据同步过程。</p><p><strong>所有正常运行的服务器,要么成为Leader,要么成为Follower并和Leader保持同步。Leader服务器需要确保所有的Follower服务器能够接收到每一条事务Proposal,并且能够正确地将所有已经提交了的事务Proposal应用到内存数据库中去</strong>。具体的, Leader服务器会为每一个Follower服务器都准备一个队列,并将那些没有被各Follower服务器同步的事务以Proposal消息的形式逐个发送给Follower服务器,并在每一个Proposal消息后面紧接着再发送一个Commit消息,以表示该事务已经被提交。等到Follower服务器将所有其尚未同步的事务Proposal都从Leader服务器上同步过来并成功应用到本地数据库中后, Leader服务器就会将该Follower服务器加入到真正的可用Follower列表中,并开始之后的其他流程。</p><h4 id="3-运行时状态分析"><a href="#3-运行时状态分析" class="headerlink" title="3.运行时状态分析"></a>3.运行时状态分析</h4><p>在ZAB协议的设计中，每个进程都有可能处于下面三种状态之一：</p><ul><li><strong>Looking</strong>：Leader选举阶段；</li><li><strong>Following</strong>：Follower服务器和Leader服务器保持同步状态；</li><li><strong>Leading</strong>：Leader服务器作为主进程领导状态。</li></ul><p><strong>所有进程初始状态都是LOOKING状态,此时不存在Leader,接下来,进程会试图选举出一个新的Leader,之后,如果进程发现已经选举出新的Leader了,那么它就会切换到FOLLOWING状态,并开始和Leader保持同步,处于FOLLOWING状态的进程称为Follower, LEADING状态的进程称为Leader,当Leader崩溃或放弃领导地位时,其余的Follower进程就会转换到LOOKING状态开始新一轮的Leader选举</strong>。</p><p>一个Follower只能和一个Leader保持同步, Leader进程和所有的Follower进程之间都通过<strong>心跳检测机制</strong>来感知彼此的情况。若Leader能够在超时时间内正常收到心跳检测,那么Follower就会一直与该eader保持连接,而如果在指定时间内Leader无法从<strong>过半的Follower进程那里接收到心跳检测,或者TCP连接断开,那么Leader会放弃当前周期的领导</strong>,并转换到LOOKING状态,其他的Follower也会选择放弃这个Leader,同时转换到LOOKING状态,之后会进行新一轮的Leader选举。</p><h4 id="4-ZAB与Paxos联系和区别"><a href="#4-ZAB与Paxos联系和区别" class="headerlink" title="4.ZAB与Paxos联系和区别"></a>4.ZAB与Paxos联系和区别</h4><p>联系：</p><ul><li>都存在一个类似于<strong>Leader进程的角色</strong>,由其负责协调多个Follower进程的运行。</li><li>Leader进程都会等待<strong>超过半数的Follower做出正确的反馈</strong>后,才会将一个提议进行提交。</li><li>在ZAB协议中,每个<strong>Proposal</strong>中都包含了一个epoch值,用来代表当前的Leader周期,在Paxos算法中,同样存在这样的一个标识,名字为Ballot。</li></ul><p>区别：</p><ul><li>Paxos算法中,新选举产生的主进程会进行两个阶段的工作,第一阶段称为<strong>读阶段</strong>,新的主进程和其他进程通信来收集主进程提出的提议,并将它们提交。第二阶段称为<strong>写阶段</strong>,当前主进程开始提出自己的提议。</li><li>ZAB协议在Paxos基础上添加了<strong>同步阶段</strong>,此时,新的Leader会确保存在过半的Follower已经提交了之前的Leader周期中的所有事务Proposal,这一同步阶段的引入,能够有效地<strong>保证Leader在新的周期中提出事务Proposal之前,所有的进程都已经完成了对之前所有事务Proposal的提交</strong>。</li></ul><p>总的来说, ZAB协议和Paxos算法的本质区别在于,两者的设计目标不太一样, <strong>ZAB协议主要用于构建一个高可用的分布式数据主备系统,而Paxos算法则用于构建一个分布式的一致性状态机系统</strong>。</p><h3 id="二-服务器角色"><a href="#二-服务器角色" class="headerlink" title="二.服务器角色"></a>二.服务器角色</h3><h4 id="1-Leader"><a href="#1-Leader" class="headerlink" title="1.Leader"></a>1.Leader</h4><p>Leader服务器是Zookeeper集群工作的核心，其主要工作有以下两个：</p><ul><li><strong>事务请求的唯一调度和处理者,保证集群事务处理的顺序性</strong>。</li><li><strong>集群内部各服务器的调度者</strong>。</li></ul><p>使用责任链来处理每个客户端的请求是Zookeeper的特色, Leader服务器的请求处理链如下:</p><p><img src="/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/image-20201112224204488.png" alt="image-20201112224204488"></p><p>可以看到,从prepRequestProcessor到FinalRequestProcessor前后一共7个请求处理器组成了leader服务器的请求处理链。</p><ul><li>PrepRequestProcessor,<strong>请求预处理器</strong>。也是leader服务器中的第一个请求处理器。在Zookeeper中,那些会改变服务器状态的请求称为事务请求(创建节点、更新数据、删除节点、创建会话等). PrepRequestProcessor能够识别出当前客户端请求是否是事务请求。对于事务请求,PrepRequestProcessor处理器会对其进行一系列预处理,如创建请求事务头、事务体、会话检查、ACL检查和版本检查等。</li><li>ProposalRequestProcessor,<strong>事务投票处理器</strong>。也是Leader服务器事务处理流程的发起者,对于非事务性请求, ProposalRequestProcessor会直接将请求转发到CommitProcessor处理器,不再做任何处理,而对于事务性请求,处理将请求转发到CommitProcessor外,还会根据请求类型创建对应的Proposal提议,并发送给所有的Follower服务器来发起一次集群内的事务投票。同时,ProposalRequestProcessor还会将事务请求交付给SyncRequestProcessor进行事务日志的记录。</li><li>SyncRequestProcessor,<strong>事务日志记录处理器</strong>。用来将事务请求记录到事务日志文件中,同时会触发Zookeeper进行数据快照。</li><li>AckRequestProcessor,负责在SyncRequestProcessor完成事务日志记录后,向Proposal的投票收集器发送ACK反馈,以通知投票收集器当前服务器已经完成了对该Proposal的事务日志记录。</li><li>CommitProcessor,<strong>事务提交处理器</strong>。对于非事务请求,该处理器会直接将其交付给下一级处理器处理;对于事务请求,其会等待集群内针对Proposal的投票直到该Proposal可被提交,利用CommitProcessor,每个服务器都可以很好地控制对事务请求的顺序处理。</li><li>ToBeCommitProcessor。该处理器有一个toBeApplied队列,用来存储那些已经被CommitProcessor处理过的可被提交的Proposal,其会将这些请求交付给FinalRequestProcessor处理器处理,待其处理完后,再将其从toBeApplied队列中移除。</li><li>FinalRequestProcessor,用来进行客户端请求返回之前的操作,包括创建客户端请求的响应,针对事务请求,该处理器还会负责将事务应用到内存数据库中。</li></ul><h4 id="2-Follower"><a href="#2-Follower" class="headerlink" title="2.Follower"></a>2.Follower</h4><p>Follower服务器是Zookeeper集群状态中的跟随者，其主要工作有以下三个：</p><ul><li><strong>处理客户端非事务性请求(读取数据) ,转发事务请求给Leader服务器</strong>。</li><li><strong>参与事务请求Proposal的投票</strong>。</li><li><strong>参与Leader选举投票</strong>。</li></ul><p>和leader一样, Follower也采用了责任链模式组装的请求处理链来处理每一个客户端请求,由于<strong>不需要对事务请求的投票处理</strong>,因此Follower的请求处理链会相对简单,其处理链如下：</p><p><img src="/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/image-20201112225103738.png" alt="image-20201112225103738"></p><p>和Leader服务器的请求处理链最大的不同点在于, Follower服务器的第一个处理器换成了FollowerRequestProcessor处理器,同时由于不需要处理事务请求的投票,因此也没有了ProposalRequestProcessor处理器。</p><ul><li>FollowerRequestProcessor：其用作<strong>识别当前请求是否是事务请求</strong>,若是,那么Follower就会将该请求转发给Leader服务器,Leader服务器在接收到这个事务请求后,就会将其提交到请求处理链,按照正常事务请求进行处理。</li><li>SendAckRequestProcessor：其承担了<strong>事务日志记录反馈的角色</strong>,在完成事务日志记录后,会向Leader服务器发送ACK消息以表明自身完成了事务日志的记录工作。</li></ul><h4 id="3-Observer"><a href="#3-Observer" class="headerlink" title="3.Observer"></a>3.Observer</h4><p>Observer充当了一个观察者的角色——其<strong>观察Zookeeper集群的最新状态变化并将这些状态变更同步过来</strong>。Observer服务器在工作原理上和Follower基本是一致的,<strong>对于非事务请求,都可以进行独立的处理,而对于事务请求,则会转发给Leader服务器进行处理</strong>。</p><p>和Follower唯一的区别在于, <strong>Observer不参与任何形式的投票,包括事务请求Proposal的投票和Leader选举投票</strong>。简单地讲, Observer服务器只提供非事务服务,通常用于在不影响集群事务处理能力的前提下提升集群的非事务处理能力。另外, Observer的请求处理链路和Follower服务器也非常相近,其处理链如下：</p><p><img src="/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/image-20201112225746605.png" alt="image-20201112225746605"></p><p>需要注意的是,虽然在图中可以看到, Observer服务器在初始化阶段会将SyncRequestProcessor处理器也组装上去,但是在实际运行过程中, <strong>Leader服务器不会将事务请求的投票发送给Observer服务器</strong>。</p><h3 id="三-服务器启动"><a href="#三-服务器启动" class="headerlink" title="三.服务器启动"></a>三.服务器启动</h3><h4 id="1-服务端整体架构图"><a href="#1-服务端整体架构图" class="headerlink" title="1.服务端整体架构图"></a>1.服务端整体架构图</h4><p><img src="/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/image-20201112230122117.png" alt="image-20201112230122117"></p><p>Zookeeper服务器的启动，大致可以分为以下五个步骤：</p><p>1.配置文件解析 2.初始化数据管理器 3.初始化网络I&#x2F;O管理器 4.数据恢复 5.对外服务。</p><h4 id="2-单机版服务器启动"><a href="#2-单机版服务器启动" class="headerlink" title="2.单机版服务器启动"></a>2.单机版服务器启动</h4><p><img src="/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/image-20201112230346526.png" alt="image-20201112230346526"></p><p>上图过程可分为预启动和初始化过程。</p><h5 id="2-1-预启动"><a href="#2-1-预启动" class="headerlink" title="2.1 预启动"></a>2.1 预启动</h5><ol><li>统一由<strong>QuorumPeerMain作为启动类</strong>。无论单机或集群,在zkServer.cmd和zkServer.sh中都配置了QuorumPeerMain作为启动入口类。</li><li>解析<strong>配置文件zoo.cfg</strong>。zoo.cfg配置运行时的基本参数,如tickTime, dataDir,clientPort等参数。</li><li>创建并启动<strong>历史文件清理器DatadircleanupManager</strong>。对事务日志和快照数据文件进行定时清理。</li><li>判断当前是集群模式还是单机模式启动。若是单机模式,则委托给zooKeeperServerMain进行启动。</li><li>再次进行<strong>配置文件zoo.cfg的解析</strong>。</li><li>创建<strong>服务器实例ZooKeeperServer</strong>。zookeeper服务器首先会进行服务器实例的创建,然后对该服务器实例进行初始化,包括连接器、内存数据库、请求处理器等组件的初始化。</li></ol><h5 id="2-2-初始化"><a href="#2-2-初始化" class="headerlink" title="2.2 初始化"></a>2.2 初始化</h5><ol><li>创建<strong>服务器统计器ServerStats</strong>。ServerStats是zookeeper服务器运行时的统计器。</li><li>创建Zookeeper<strong>数据管理器FilerxnSnapLog</strong>。FilerxnSnapLog是zookeeper上层服务器和底层数据存储之间的对接层,提供了一系列操作数据文件的接口,如事务日志文件和快照数据文件。Zookeeper根据zoo.cfq文件中解析出的快照数据目录dataDir和事务日志目录dataLogDir来创建FilerxnSnapLog。</li><li>设置服务器tickTime和会话超时时间限制。</li><li><strong>创建ServerCnxnFactory</strong>。通过配置系统属性zookeper.serverCnxnFactory来指定使用zookeeper自己实现的NIO还是使用Netty框架作为zookeeper服务端网络连接工厂。</li><li><strong>初始化ServerCnxnFactory</strong>。zookeeper会初始化Thread作为ServerCnxnFactory的主线程,然后再初始化NIO服务器。</li><li><strong>启动ServerCnxnFactory主线程</strong>。进入Thread的run方法,此时服务端还不能处理客户端请求。</li><li><strong>恢复本地数据</strong>。启动时,需要从本地快照数据文件和事务日志文件进行数据恢复。</li><li><strong>创建并启动会话管理器</strong>。zookeeper会创建会话管理器SessionTracker进行会话管理。</li><li><strong>初始化zookeeper的请求处理链</strong>。Zookeeper请求处理方式为责任链模式的实现。会有多个请求处理器依次处理一个客户端请求,在服务器启动时,会将这些请求处理器串联成一个请求处理链。</li><li><strong>注册JMX服务</strong>。zookeeper会将服务器运行时的一些信息以JMX的方式暴露给外部。</li><li><strong>注册zookeeper服务器实例</strong>。将zookeeper服务器实例注册给serverCnxnFactory,之后zookeeper就可以对外提供服务。</li></ol><p>到此，单机版的Zookeeper服务器启动完毕。</p><h4 id="3-集群服务器启动"><a href="#3-集群服务器启动" class="headerlink" title="3.集群服务器启动"></a>3.集群服务器启动</h4><p>单机和集群服务器的启动在很多地方是一致的，流程图如下：</p><p><img src="/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/image-20201112231913008.png" alt="image-20201112231913008"></p><p>上图过程可以分为预启动、初始化、Leader选举、Leader与Follower启动期交互、Leader与Follower启动等过程。</p><h5 id="3-1-预启动"><a href="#3-1-预启动" class="headerlink" title="3.1 预启动"></a>3.1 预启动</h5><ol><li>统一由QuorumPeerMain作为启动类。</li><li>解析配置文件zoo.cfg。</li><li>创建并启动历史文件清理器DatadircleanupFactory。</li><li>判断当前是集群模式还是单机模式的启动。在集群模式中,在zoo.cfg文件中配置了多个服务器地址，可以选择集群启动。</li></ol><h5 id="3-2-初始化"><a href="#3-2-初始化" class="headerlink" title="3.2 初始化"></a>3.2 初始化</h5><ol><li>创建ServerCnxnFactory。</li><li>初始化serverCnxnFactory。</li><li>创建zookeeper数据管理器FilerxnSnapLog。</li><li>创建QuorumPeer实例。Quorum是集群模式下特有的对象,是zookeeper服务器实例(zooKeeperServer)的托管者, QuorumPeer代表了集群中的一台机器,在运行期间,QuorumPeer会不断检测当前服务器实例的运行状态,同时根据情况发起Leader选举。</li><li>创建内存数据库ZKDatabase。ZKDatabase负责管理Zookeeper的所有会话记录以及Datarree和事务日志的存储。</li><li>初始化QuorumPeer。将核心组件如FileTxnSnapLog、ServerCnxnFactory,zKDatabase注册到QuorumPeer中,同时配置QuorumPeer的参数,如服务器列表地址、Leader选举算法和会话超时时间限制等。</li><li>恢复本地数据。</li><li>启动serverCnxnFactory主线程。</li></ol><h5 id="3-3-Leader选举"><a href="#3-3-Leader选举" class="headerlink" title="3.3 Leader选举"></a>3.3 Leader选举</h5><p><strong>1).初始化Leader选举</strong>。</p><p>集群模式特有, zookeeper首先会根据自身的服务器ID (sID) 、最新的ZxID (lastLoggedzxid)和当前的服务器epoch (currentEpoch)来生成一个初始化投票,在初始化过程中,每个服务器都会给自己投票。然后,根据zoo.cfg的配置,创建相应Leader选举算法实现, zookeeper提供了三种默认算法(LeaderElection,AuthFastLeaderElection、FastLeaderElection) ,可通过zoo.cfg中的electionAlg属性来指定,但现只支持FastLeaderElection选举算法。在初始化阶段, zookeeper会创建Leader选举所需的网络I&#x2F;O层QuorumCnxManager,同时启动对Leader选举端口的监听,等待集群中其他服务器创建连接。</p><p><strong>2).注册JMX服务</strong>。</p><p><strong>3).检测当前服务器状态</strong>。</p><p>运行期间, QuorumPeer会不断检测当前服务器状态。在正常情况下, zookeeper服务器的状态在LOOKING、 LEADING、FOLLOWING&#x2F;OBSERVING之间进行切换。在启动阶段, QuorumPeer的初始状态是LOOKING,因此开始进行Leader选举。</p><p><strong>4).Leader选举</strong>。</p><p>Zookeeper的Leader选举过程,简单地讲,就是一个集群中所有的机器相互之间进行一系列投票,选举产生最合适的机器成为Leader,同时其余机器成为Follower或是observer的集群机器角色初始化过程。关于Leader选举算法,简而言之,就是集群中哪个机器处理的数据越新(通常我们根据每个服务器处理过的最大ZxID来比较确定其数据是否更新) ,其越有可能成为Leader。当然,如果集群中的所有机器处理的zxID-致的话,那么sID最大的服务器成为Leader,其余机器称为Follower和observer。</p><h5 id="3-4-Leader与Follower启动期交互"><a href="#3-4-Leader与Follower启动期交互" class="headerlink" title="3.4 Leader与Follower启动期交互"></a>3.4 Leader与Follower启动期交互</h5><p>到这里为止, ZooKeeper已经完成了Leader选举,并且集群中每个服务器都已经确定了自己的角色——通常情况下就分为<strong>Leader和Follower两种角色</strong>。下面我们来对Leader和Follower在启动期间的交互进行介绍,其大致交互流程如图所示。</p><p><img src="/2022/02/15/Zookeeper%E5%8D%8F%E8%AE%AE%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%92%E8%89%B2%E5%8F%8A%E5%90%AF%E5%8A%A8%E3%80%81leader%E9%80%89%E4%B8%BE/image-20201112235910592.png" alt="image-20201112235910592"></p><ol><li><strong>创建Leader服务器和Follower服务器</strong>。完成Leader选举后,每个服务器会根据自己服务器的角色创建相应的服务器实例,并进入各自角色的主流程。</li><li><strong>Leader服务器启动Follower接收器LearnerCnxAcceptor</strong>。运行期间, Leader服务器需要和所有其余的服务器(统称为Learner)保持连接以确集群的机器存活情况, LearnerCnxAcceptor负责接收所有非Leader服务器的连接请求。</li><li><strong>Learner服务器开始和Leader建立连接</strong>。所有Learner会找到Leader服务器,并与其建立连接。</li><li><strong>Leader服务器创建LearnerHandler,</strong> Leader接收到来自其他机器连接创建请求后,会创建一个earnerHandler实例,每个LearnerHandler实例都对应一个Leader与Learner服务器之间的连接,其负责Leader和Learner服务器之间几乎所有的消息通信和数据同步。</li><li><strong>向Leader注册</strong>。Learner完成和Leader的连接后,会向Leader进行注册,即将Learner服务器的基本信息(Learnerlnfo) ,包括SID和ZXID,发送Leader服务器。</li><li><strong>Leader解析Learner信息，计算新的epoch</strong>。Leader接收到Learner服务器基本信息后,会解析出该Learner的SID和ZXID,然后根据ZXID解析出对应的epoch_oflearner,并和当前Leader服务器的epoch_ofleader进行比较,如果该Learner的epoch_oflearner更大,则更新Leader的epoch_of leader &#x3D; epoch_oflearner +1,然后LearnHandler进行等待,直到过半Learner已经句Leader进行了注册,同时更新了epoch_ofleader后, Leader就可以确定当前集群的epoch了。</li><li><strong>发送Leader状态</strong>。计算出新的epoch后, Leader会将该信息以一个LEADERINFO消息的形式发送给Learner,并等待Learner的响应。</li><li><strong>Learner发送ACK消息</strong>。Learner接收到LEADERINFO后,会解析出epoch和ZXID,然后向Leader反馈一个ACKEPOCH响应。</li><li><strong>数据同步</strong>。Leader收到Learner的ACKEPOCH后,即可进行数据同步。</li><li><strong>启动Leader和Learner服务器</strong>。当有过半Learner已经完成了数据同步,那么Leader和Learner服务器实例就可以启动了。</li></ol><h5 id="3-5-Leader与Follower启动"><a href="#3-5-Leader与Follower启动" class="headerlink" title="3.5 Leader与Follower启动"></a>3.5 Leader与Follower启动</h5><ol><li>创建启动会话管理器。</li><li>初始化Zookeeper请求处理链，集群模式的每个处理器也会在启动阶段串联请求处理链。</li><li>注册JMX服务。</li></ol><p>至此，集群版的Zookeeper服务器启动完毕。</p><h3 id="四-leader选举"><a href="#四-leader选举" class="headerlink" title="四.leader选举"></a>四.leader选举</h3><p>当Zookeeper集群中的一台服务器出现以下两种情况之一时，需要进入Leader选举。</p><ul><li>服务器初始化启动。</li><li>服务器运行期间无法和Leader保持连接。</li></ul><h4 id="1-服务器启动时期的Leader选举"><a href="#1-服务器启动时期的Leader选举" class="headerlink" title="1.服务器启动时期的Leader选举"></a>1.服务器启动时期的Leader选举</h4><p>若进行Leader选举,则至少需要两台机器,这里选取3台机器组成的服务器集群为例。在集群初始化阶段,当有一台服务器Server1启动时,其单独无法进行和完成Leader选,当第二台服务器Server2启动时,此时两台机器可以相互通信,每台机器都试图找到Leader,于是进入Leader选举过程。选举过程如下：</p><p><strong>1).每个Server发出一个投票</strong></p><p>由于是初始情况, Server1 (假设myid为1)和Server2假设myid为2)都会将自己作为Leader服务器来·进行投票,每次投票会包含所推举的服务器的myid和ZXID,使用(myid, ZXID)来表示,此时Server1的投票为(1, 0), Server2的投票为(2, 0),然后各自将这个投票发给集群中其他机器。</p><p><strong>2).接受来自各个服务器的投票</strong></p><p>集群的每个服务器收到投票后,首先判断该投票的有效性,如检查是否是本轮投票、是否来自LOOKING状态的服务器。</p><p><strong>3).处理投票</strong></p><p>针对每一个投票，服务器都需要将别人的投票和自己的投票进行PK，PK规则如下：</p><ul><li><strong>优先检查ZXID</strong>。ZXID比较大的服务器优先作为Leader。</li><li><strong>如果ZXID相同,那么就比较myid</strong>。myid较大的服务器作为Leader服务器。</li></ul><p>现在我们来看Server1和Server2实际是如何进行投票处理的。对于Server1来说,它自己的投票是(1, 0) ,而接收到的投票为(2, 0) 。首先会对比两者的ZXID,因为都是0,所以无法决定谁是Leader,接下来会对比两者的myid,很显然, Server1发现接收到的投票中的myid是2,大于自己,于是就会更新自己的投票为(2, 0) ,然后重新将投票发出去。而对于Server2来说,不需要更新自己的投票。</p><p><strong>4).统计投票</strong></p><p>每次投票后,服务器都会统计所有投票,判断是否已经有过半的机器接收到相同的投票信息。对于Server1和server2服务器来说,都统计出集群中已经有两台机器接受了(2, 0)这个投票信息。这里我们需要对”过半”的概念做一个简单的介绍。所谓”过半”就大于集群机器数一半,即大于或等于(n&#x2F;2+1) 。对于这里由3台机器构成的集群,大于等于2台即为达到”过半”要求。</p><p>即当Server1和Server2都收到相同的投票信息（2，0）的时候，认为已经选出了Leader。</p><p><strong>5).改变服务器状态</strong></p><p>一旦确定了Leader,每个服务器就会更新自己的状态：如果是Follower,那么就变更为FOLLOWING,如果是Leader,那么就变更为LEADING。</p><h4 id="2-服务器运行时期的Leader选举"><a href="#2-服务器运行时期的Leader选举" class="headerlink" title="2.服务器运行时期的Leader选举"></a>2.服务器运行时期的Leader选举</h4><p>在ZooKeeper集群正常运行过程中,一旦选出一个Leader,那么所有服务器的集群角色一般不会再发生变化——也就是说, Leader服务器将一直作为集群的Leader,即使集群中有非Leader机器挂了或是有新机器加入集群也不会影响Leader。但是<strong>一旦Leader所在的机器挂了,那么整个集群将暂时无法对外服务,而是进入新一轮的Leader选举</strong>。服务器运行期间的Leader选举和启动时期的Leader选举基本过程是一致的。</p><p>还是假设当前正在运行的ZooKeeper机器由3台机器组成,分别是Server1、Server2和Server3, 当前的Leader是Server2。假设在某一个瞬间, Leader挂了,这个时候便开始了Leader选举。</p><p><strong>1).变更状态</strong></p><p>Leader挂后,余下的非Observer服务器都会将自己的服务器状态变更为LOOKING,然后开始进入Leader选举过程。</p><p><strong>2).每个Server会发出一个投票</strong></p><p>在运行期间,每个服务器上的ZXID可能不同,此时假定Server1的ZXID为123, Server3的ZXID为122;在第一轮投票中, Server1和Server3都会投自己,产生投票(1, 123), (3, 122),然后各自将投票发送给集群中所有机器。</p><p><strong>3).接收来自各个服务器的投票,与启动时过程相同</strong>。</p><p><strong>4).处理投票。与启动时过程相同,此时,Server1将会成为Leader</strong>。</p><p><strong>5).统计投票。与启动时过程相同</strong>。</p><p><strong>6).改变服务器的状态。与启动时过程相同</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Zookeeper协议、服务器角色及启动、leader选举&quot;&gt;&lt;a href=&quot;#Zookeeper协议、服务器角色及启动、leader选举&quot; class=&quot;headerlink&quot; title=&quot;Zookeeper协议、服务器角色及启动、leader选举&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="学习笔记" scheme="https://www.flamingo-sky.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="zookeeper" scheme="https://www.flamingo-sky.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper基本概念和使用</title>
    <link href="https://www.flamingo-sky.com/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.flamingo-sky.com/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/</id>
    <published>2022-02-14T21:30:43.000Z</published>
    <updated>2022-02-14T22:56:03.613Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper基本概念和使用"><a href="#zookeeper基本概念和使用" class="headerlink" title="zookeeper基本概念和使用"></a>zookeeper基本概念和使用</h1><h2 id="一-基础概念"><a href="#一-基础概念" class="headerlink" title="一. 基础概念"></a>一. 基础概念</h2><h3 id="集群角色"><a href="#集群角色" class="headerlink" title="集群角色"></a>集群角色</h3><ul><li>leader</li><li>follower</li><li>observer</li></ul><h3 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h3><ul><li>客户端和服务端之间连接的一个TCP长连接，zookeeper对外的服务端口默认是2181.</li></ul><h3 id="数据节点"><a href="#数据节点" class="headerlink" title="数据节点"></a>数据节点</h3><ul><li>机器节点：构成集群的机器</li><li>数据节点：指数据模型中的数据单元</li></ul><h3 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h3><p>Zookeeper会为每个ZNode维护一个Stat的数据结构，Stat记录了这个ZNode的三个数据版本，分别是version（当前ZNode版本）、cversion（当前ZNode子节点版本）、aversion（当前ZNode的ACL版本）。</p><h3 id="事件监听器（watcher）"><a href="#事件监听器（watcher）" class="headerlink" title="事件监听器（watcher）"></a>事件监听器（watcher）</h3><p>在指定节点上注册一些Watcher，这些事件监听器触发时，Zookeeper服务端会将事件通知给感兴趣的客户端，这机制是Zookeeper实现分布式协调服务的重要特性。</p><h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>ACL（Access Control Lists）权限控制策略。如下五种权限：</p><ul><li>CREATE：创建<strong>子节点</strong>的权限</li><li>READ：获取节点数据和子节点列表的权限</li><li>WRITE：更新节点数据的权限</li><li>DELETE：删除<strong>子节点</strong>的权限</li><li>ADMIN：设置节点ACL的权限</li></ul><h2 id="二-基本使用"><a href="#二-基本使用" class="headerlink" title="二. 基本使用"></a>二. 基本使用</h2><h3 id="1-zookeeper系统模型"><a href="#1-zookeeper系统模型" class="headerlink" title="1. zookeeper系统模型"></a>1. zookeeper系统模型</h3><p>在Zookeeper中数据信息被保存在一个个数据节点上,这些节点被称为ZNode。ZNode是zookeeper中最小数据单位，类似文件系统的层级树状结构。</p><p><img src="/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20200701074846031.png"></p><h4 id="1-1-ZNode的类型"><a href="#1-1-ZNode的类型" class="headerlink" title="1.1 ZNode的类型"></a>1.1 ZNode的类型</h4><p>数据节点ZNode的节点类型分类：持久性节点（Persistent）、临时性节点（Ephemeral）、顺序性节点（Sequential）。</p><p>创建节点时可以通过组合生成以下四种节点类型：持久节点、持久顺序节点、临时节点、临时顺序节点。<strong>不同类型的节点会有不同的生命周期</strong>。</p><ul><li>持久节点：节点被创建后会一直存在服务器，知道删除操作主动清除</li><li>持久顺序节点：创建节点时会在节点名后面加上一个数字后缀来表示顺序，和持久节点特性一样</li><li>临时节点：生命周期和客户端会话绑在一起，客户端会话结束，节点会被删除；不能创建子节点</li><li>临时顺序节点：有顺序的临时节点</li></ul><p>在zookeeper中，事务是指能够改变zookeeper服务器状态的操作，称为事务操作和更新操作。一般包括数据节点的创建与删除、数据节点内容更新等操作。</p><p>每一次事务请求，zk都会为其分配一个全局唯一的事务id，用ZXID表示，通常是一个64位数字。每一个ZXID对应一次更新更新操作。</p><h4 id="1-2-ZNode的状态信息"><a href="#1-2-ZNode的状态信息" class="headerlink" title="1.2 ZNode的状态信息"></a>1.2 ZNode的状态信息</h4><p><img src="/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20200701074954030.png"></p><p>整个ZNode节点内容包括两部分：节点数据内容和节点状态信息。quota是数据内容，其它属于状态信息。</p><ul><li><p>cZxid 就是 Create ZXID，表示节点被创建时的事务ID。</p></li><li><p>ctime 就是 Create Time，表示节点创建时间。</p></li><li><p>mZxid 就是 Modified ZXID，表示节点最后⼀次被修改时的事务ID。</p></li><li><p>mtime 就是 Modified Time，表示节点最后⼀次被修改的时间。</p></li><li><p>pZxid 表示该节点的⼦节点列表最后⼀次被修改时的事务 ID。只有⼦节点列表变更才会更新 pZxid，⼦节点内容变更不会更新。</p></li><li><p>cversion 表示⼦节点的版本号。</p></li><li><p>dataVersion 表示内容版本号。</p></li><li><p>aclVersion 标识acl版本。</p></li><li><p>ephemeralOwner 表示创建该临时节点时的会话 sessionID，如果是持久性节点那么值为 0。</p></li><li><p>dataLength 表示数据⻓度。</p></li><li><p>numChildren 表示直系⼦节点数。</p></li><li><p>1.3 Watcher数据变更通知</p><p>Zookeeper使用Watcher机制实现分布式数据的发布&#x2F;订阅功能。多个订阅者同时监听某一个主题对象，主题对象状态发生变化时，会通知所有的订阅者做出相应处理。</p><p>Zookeeper允许客户端向服务端注册一个Watcher监听，当服务端的指定事件触发了Watcher，就会向指定客服端发送一个事件通知。</p><p><img src="/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20200701075035071.png" alt="image-20200701075035071"></p></li></ul><p>Zookeeper的Watcher机制包括<strong>客户端线程、客服端WatcherManager、Zookeeper服务器</strong>三部分。</p><p><strong>具体流程</strong>：客户端向zk服务器注册的同时会将Watcher对象存储在客户端的WatcherManager中，当Zookeeper服务器触发Watcher使劲按后回向客服端发送通知，客户端线程从WatcherManager中取出对应的Watcher对象来执行回调逻辑。</p><h4 id="1-4-ACL保障数据的安全"><a href="#1-4-ACL保障数据的安全" class="headerlink" title="1.4 ACL保障数据的安全"></a>1.4 ACL保障数据的安全</h4><p>在Zookeeper中提供了一套完善的ACL（Access Control List）权限控制机制来保障数据的安全。</p><p>通常会使用“权限模式（scheme）：授权对象（id）：权限（permission）”来标志一个有效的ACL信息。</p><ul><li><strong>权限模式</strong>用来确定权限验证中使用的检验策略</li><li><strong>授权对象</strong>指的是权限赋予的用户或一个指定实体</li><li><strong>权限</strong>指通过权限检查后可以被允许执行的操作</li></ul><p>权限与授权对象的关系：</p><table><thead><tr><th align="left">权限模式</th><th>授权对象</th></tr></thead><tbody><tr><td align="left">IP</td><td>通常使用IP地址或IP段。例如：192.168.91.105（IP）或 192.168.91.1&#x2F;24（网段）</td></tr><tr><td align="left">Digest</td><td>自定义，通常是username：BASE64（SHA-1（username：password））进行加密再编码</td></tr><tr><td align="left">World</td><td>只有一个ID：anyone</td></tr><tr><td align="left">Super</td><td>超级用户</td></tr></tbody></table><p>权限分为五大类：CREATE（子节点）、DELETE（子节点）、READ、WRITE、ADMIN（对节点进行ACL设置）。简称为CDRWA。</p><h3 id="2-命令行操作"><a href="#2-命令行操作" class="headerlink" title="2.命令行操作"></a>2.命令行操作</h3><p>对节点的增删改查常用命令：输入help后，回显示可用的Zookeeper命令</p><ul><li>create 【-s】【-e】path data acl：创建节点（顺序&#x2F;临时） &#x2F;zlg 123</li><li>ls path：显示节点的所有直系子节点</li><li>get path：显示节点的内容和属性信息</li><li>ls2 path：显示节点的直系子节点列表和属性信息</li><li>set path data 【version】：更新指定节点的数据内容，data表示更新的内容，version表示数据版本</li><li>delete path 【version】：删除指定的节点，version表示数据版本（dataVersion），若删除节点存在子节点，就无法删除该节点，必须先删除子节点，再删除父节点</li></ul><h3 id="3-相关客户端api使用"><a href="#3-相关客户端api使用" class="headerlink" title="3.相关客户端api使用"></a>3.相关客户端api使用</h3><p>有Zookeeper的原生API、ZkClient、Curator 三种使用方式。下面对这三种使用方式的API做下对比：</p><p>引入依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.4</span><span class="number">.14</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.curator&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;curator-framework&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.12</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>原生部分API：</p><ul><li>创建会话：new Zookeeper(connectString,sesssionTimeOut,Watcher)</li><li>创建节点：zookeeper.create(path,data,acl,createMode)</li><li>删除节点：zookeeper.delete(path,version)</li><li>获取数据：zk.getData(path, watch, stat)</li><li>获取子节点列表：zooKeeper.getChildren(path, watch)</li><li>更新数据：zooKeeper.setData(path, data,version)</li></ul><p>ZkClient客户端：</p><ul><li>创建会话：new ZkClient(serverString)</li><li>创建节点：zkClient.createPersistent(String path, boolean createParents)</li><li>删除节点：zkClient.deleteRecursive(String path)</li><li>获取数据：zkClient.readData(path)</li><li>获取子节点列表：zkClient.getChildren(path)</li><li>更新数据：zkClient.writeData(path, object)</li><li>事件监听：<ul><li>zkClient.subscribeChildChanges(path, new IZkChildListener() {…})</li><li>zkClient.subscribeDataChanges(path, new IZkDataListener() {…}</li></ul></li></ul><p>Curator客户端：</p><ul><li>创建会话：public static CuratorFramework newClient(String connectString, int sessionTimeoutMs, int connectionTimeoutMs, RetryPolicy retryPolicy)</li><li>创建节点：client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPa th(path,data); data需要序列化 data &#x3D; serializer.serialize(new ServerInfo(ip, port, 0L))</li><li>删除节点：client.delete().deletingChildrenIfNeeded().forPath(path)</li><li>获取数据：client.getData().forPath(path)得到的字节数组bytes需要反序列化; serializer.deserialize(ServerInfo.class, bytes);</li><li>获取子节点列表：client.getChildren().forPath(path)</li><li>更新数据：client.setData().forPath(path, data)</li></ul><h2 id="三-zookeeper应用场景"><a href="#三-zookeeper应用场景" class="headerlink" title="三.zookeeper应用场景"></a>三.zookeeper应用场景</h2><p>利用 ZooKeeper 可以非常方便构建一系列分布式应用中都会涉及到的核心功能。</p><ol><li>数据发布&#x2F;订阅</li><li>负载均衡</li><li>命名服务</li><li>分布式协调&#x2F;通知</li><li>集群管理</li><li>Master 选举</li><li>分布式锁</li><li>分布式队列</li></ol><p>多个开源项目中都应用到了 ZooKeeper，例如 HBase, Spark, Flink, Storm, Kafka, Dubbo 等等。</p><p>Zookeeper应用场景文章推荐：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/59669985">ZooKeeper 的应用场景(opens new window)</a></li><li><a href="https://www.javazhiyin.com/28435.html">图解ZooKeeper的典型应用场景(opens new window)</a></li><li><a href="https://www.jianshu.com/p/2e970fe35c3f">ZooKeeper应用场景及方案介绍(opens new window)</a></li><li><a href="https://blog.csdn.net/u013679744/article/details/79371022">Zookeeper系列（6）– Zookeeper的典型应用场景(opens new window)</a></li><li><a href="https://xiaoxiami.gitbook.io/zookeeper/chapter1">Zookeeper应用场景(opens new window)</a></li></ul><p><strong>下面主要看下Zookeeper在分布式锁上的应用场景</strong></p><p>分布式锁是控制分布式系统之间同步访问共享资源的一种方式。如果不同的系统或是同一个系统的不同主机之间共享了一个或一组资源,那么访问这些资源的时候,往往需要通过一些互斥手段来防止彼此之间的干扰,以保证一致性,在这种情况下,就需要使用分布式锁了。下面看下<strong>Zookeeper如何实现排他锁和共享锁两类分布式锁</strong>。</p><h4 id="1-排他锁"><a href="#1-排他锁" class="headerlink" title="1.排他锁"></a>1.排他锁</h4><p>排他锁(Exclusive Locks,简称×锁) ,又称为写锁或独占锁,是一种基本的锁类型。如果事务T1对数据对象o1加上了排他锁,那么在整个加锁期间,只允许事务T1对o1进行读取和更新操作,其他任何事务都不能再对这个数据对象进行任何类型的操作——直到T1释放了排他锁。</p><p>排他锁的核心是如何保证当前有且仅有一个事务获,得锁,并且锁被释放后,所有正在等待获取锁的事务都能够被通知到。</p><p>Zookeeper实现排他锁步骤如下：</p><p><strong>1.定义锁</strong></p><p>Java并发编程中可以使用synchronized机制和ReentrantLock来定义锁。Zookeeper中需要定义一个<strong>临时节点</strong>来表示一个锁，如&#x2F;exclusive_lock&#x2F;lock节点可以被定义为一个锁。如图：</p><p><img src="/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20201112002600677.png" alt="image-20201112002600677"></p><p><strong>2.获取锁</strong></p><p>在需要获取排他锁时，<strong>所有客户端</strong>都试图在&#x2F;exclusive_lock节点下通过调用create()接口<strong>创建临时子节点</strong>。谁创建成功了就表示谁获取了排他锁，同时所有<strong>没有获取到锁</strong>的客户端就需要在&#x2F;exclusive_lock节点上<strong>注册一个子节点变更的Watcher监听</strong>，来监听子节点的变化情况。</p><p><strong>3.释放锁</strong></p><p>当获取锁的客户端发生宕机或正常执行完业务逻辑后，临时节点都会被移出，也就释放了锁。Zookeeper就会通知所有在&#x2F;exclusive_lock节点上注册监听的客户端，客户端接收到通知后再次发起分布式锁获取。</p><p><img src="/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20201112003645536.png" alt="image-20201112003645536"></p><h4 id="2-共享锁"><a href="#2-共享锁" class="headerlink" title="2.共享锁"></a>2.共享锁</h4><p>共享锁(Shared Locks,简称S锁) ,又称为读锁,同样是一种基本的锁类型。如果事务T1对数据对象o1加上了共享锁,那么当前事务只能对o1进行读取操作,其他事务也只能对这个数据对象加共享锁——直到该数据对象上的所有共享锁都被释放。</p><p>共享锁和排他锁最根本的区别在于：<strong>加上排他锁后,数据对象只对一个事务可见,而加上共享锁后,数据对所有事务都可见</strong>。</p><p>Zookeeper实现共享锁步骤如下：</p><p><strong>1.定义锁</strong></p><p>Zookeeper上通过定义一个<strong>临时顺序节点</strong>来代表一个共享锁。如&#x2F;share_lock&#x2F;host1-R-0000000001，如图所示：</p><p><img src="/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20201112004211314.png" alt="image-20201112004211314"></p><p><strong>2.获取锁</strong></p><p>在需要获取共享锁时,所有客户端都会到&#x2F;shared lock这个节点下面创建一个临时顺序节点,如果当前是读请求,那么就创建例如&#x2F;shared lock&#x2F;host1-R-000000000节点;如果是写请求,那么就创建例如&#x2F;sharedlock&#x2F;host2-W-0000000002的节点。</p><p>判断读写顺序：通过Zookeeper来去确定分布式读写顺序，大致分为四步。</p><blockquote><p>1,创建完节点后,获取&#x2F;shared-lock节点下所有子节点,并对该节点变更注册监听。</p><p>2,确定自己的节点序号在所有子节点中的顺序。</p><p>3,对于读请求:若没有比自己序号小的子节点或所有比自己序号小的子节点都是读请求,那么表明自己已经成功获取到共享锁,同时开始执行读取逻辑,若有写请求,则需要等待。对于写请求:若自己不是序号最小的子节点,那么需要等待。</p><p>4,接收到Watcher通知后,重复步骤1</p></blockquote><p><strong>3.释放锁</strong>，流程与排他锁一致。</p><h4 id="3-羊群效应"><a href="#3-羊群效应" class="headerlink" title="3.羊群效应"></a>3.羊群效应</h4><p>上面的共享锁的实现大体能满足集群规模不是特别大的场景。当规模扩大之后，会出现什么问题呢？结合下图看下实际运行情况：</p><p><img src="/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20201112005701385.png" alt="image-20201112005701385"></p><p>可以看到，host1客户端移出自己的共享锁后，只对host2产生影响了，对其它机器没有任何作用。大量的Watcher通知和子节点列表获取两个操作会重复运行,这样不仅会对zookeeper服务器造成巨大的性能影响影响和网络开销,更为严重的是,如果同一时间有多个节点对应的客户端完成事务或是事务中断引起节点消失, ZooKeeper服务器就会在短时间内向其余客户端发送大量的事件通知,这就是所谓的羊群效应。</p><p>上面的分布式锁竞争过程,它的核心逻辑在于:判断自己是否是所有子节点中序号最小的。于时可以联想到<strong>每个节点对应的客户端只需要关注比自己序号小的那个相关节点的变更情况</strong>就可以了–而不需要关注全局的子列表变更情况。</p><h4 id="4-改进后的分布式锁实现"><a href="#4-改进后的分布式锁实现" class="headerlink" title="4.改进后的分布式锁实现"></a>4.改进后的分布式锁实现</h4><p>上面提到的共享锁实现,从整体思路上来说完全正确。这里主要的改动在于:<strong>每个锁竞争者,只需要关注&#x2F;sharedlock节点下序号比自己小的那个节点是否存在即可</strong>,具体实现如下。</p><ol><li>客户端调用create接口常见类似于&#x2F;shared_lock&#x2F;[Hostname]-请求类型-序号的临时顺序节点。</li><li>客户端调用getChildren接口获取所有已经创建的子节点列表(不注册任何Watcher)。</li><li>如果无法获取共享锁,就调用exist接口来对比自己小的节点注册Watcher,对于读请求:向比自己序号小的最后一个写请求节点注册Watcher监听。对于写请求:向比自己序号小的最后一个节点注册Watcher监听。</li><li>等待Watcher通知,继续进入步骤2。</li></ol><p><img src="/2022/02/15/zookeeper%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%BF%E7%94%A8/image-20201112010535009.png" alt="image-20201112010535009"></p><p>如同在多线程并发编程实践中,我们会去尽量缩小锁的范围——对于分布式锁实现的改进其实也是同样的思路。根据具体的业务场景和集群规模来选择适合自己的分布式锁实现:在<strong>集群规模不大、网络资源丰富的情况</strong>下,第一种分布式锁实现方式是简单实用的选择;而如果<strong>集群规模达到一定程度</strong>,并且希望能够<strong>精细化地控制分布式锁机制</strong>,那么就可以试试改进版的分布式锁实现。</p>]]></content>
    
    
    <summary type="html">zookeeper基本概念和使用</summary>
    
    
    
    <category term="学习笔记" scheme="https://www.flamingo-sky.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="zookeeper" scheme="https://www.flamingo-sky.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 Github + Hexo 搭建博客</title>
    <link href="https://www.flamingo-sky.com/2021/03/13/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Github%20+%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://www.flamingo-sky.com/2021/03/13/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Github%20+%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2021-03-13T01:47:57.000Z</published>
    <updated>2022-02-12T19:57:36.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>搭建初衷：记录自己的学习笔记。</p></blockquote><blockquote><p>Github Pages 上搭建博客的弊端：</p><ol><li>部署在 Github 上，需要科学上网</li><li>整个流程：撰写 md 文档 ——&gt; Hexo 生成静态网页 ——&gt; 部署到Github Pages ——&gt;  浏览</li><li>维护一个静态网站，需要有容灾和备份的意识和能力。</li></ol></blockquote><span id="more"></span><h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p><ul><li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li><li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li></ul><p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p><p>安装完成后，Win+R 输入 cmd 并打开，依次输入 node -v、npm -v 和 git –version 并回车，如下图出现程序版本号即可<br><img src="https://cdn.jsdelivr.net/gh/cs-cshi/image-host/hexo-blog/version.png" alt="version"></p><h2 id="2-连接博客"><a href="#2-连接博客" class="headerlink" title="2. 连接博客"></a>2. 连接博客</h2><p>使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。</p><p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p><blockquote><p>git config –global user.name “GitHub 用户名”<br>git config –global user.email “GitHub 邮箱”</p></blockquote><p><strong>创建 SSH 密匙</strong></p><blockquote><p>输入 ssh-keygen -t rsa -C “GitHub 邮箱”，然后一路回车。</p></blockquote><p><strong>添加密匙</strong>：</p><p>进入 [C:\Users\用户名.ssh] 目录（要显示隐藏文件，如果路径不对可以看上一步 <code>创建 SSH 密钥</code>时的输出内容，会有路径信息），打开公钥 id_rsa.pub 文件并复制里面的内容。</p><p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p><p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p><p><strong>验证连接</strong>：</p><blockquote><p>打开 Git Bash，输入 ssh -T <a href="mailto:&#103;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;">&#103;&#x69;&#116;&#64;&#103;&#x69;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#111;&#x6d;</a> 出现 “Are you sure……”，输入 yes 回车确认</p></blockquote><blockquote><p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p></blockquote><h2 id="3-创建-Github-pages-仓库"><a href="#3-创建-Github-pages-仓库" class="headerlink" title="3. 创建 Github pages 仓库"></a>3. 创建 Github pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p><ul><li>Repository name 中输入：用户名.github.io</li><li>勾选 Add a README file，会自动设置分支（分支名设置成master）：This will set  master as the default branch.</li><li>create repository</li></ul><h2 id="4-创建保存源码的分支"><a href="#4-创建保存源码的分支" class="headerlink" title="4. 创建保存源码的分支"></a>4. 创建保存源码的分支</h2><p>GitHub Pages 会自动部署静态网页文件，并将 master 分支作为部署的默认分支。为将静态网页和源文件（包含文章、主题等）分离开，强烈建议创建新分支，这样 master 分支只用来发布静态网页，而文档编辑和 Hexo 操作都在另一个分支上完成。</p><p>打开博客所在本地的目录，右键 -&gt; Git Bash Here，将 git 仓库 clone 至本地：</p><blockquote><p>git clone <a href="https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E7%94%A8%E6%88%B7%E5%90%8D.github.io.git">https://github.com/用户名/用户名.github.io.git</a></p></blockquote><p>cd 命令进入仓库目录,再创建本地分支：</p><blockquote><p>git checkout -b hexo-source     # hexo-source 是我的分支名</p></blockquote><p>切换到新建分支(hexo-source是我的分支名)</p><blockquote><p>git checkout -b hexo-source</p></blockquote><p>查看本地分支(windows),此时 hexo-source 分支应该是高亮(当前分支)</p><blockquote><p>git branch -l</p></blockquote><h2 id="5-本地安装-Hexo-博客程序"><a href="#5-本地安装-Hexo-博客程序" class="headerlink" title="5. 本地安装 Hexo 博客程序"></a>5. 本地安装 Hexo 博客程序</h2><p>由于只能在空文件夹中生成 Hexo 项目,所以我们先将 <code>.git</code> 以及其他文件(如 <code>README.MD</code>)移出去,完成初始化后再移回来.</p><p>** 安装 Hexo **</p><blockquote><p>npm install -g hexo-cli</p></blockquote><p><strong>Hexo 初始化和本地预览</strong><br>初始化并安装所需组件：</p><blockquote><p>hexo init      # 初始化<br>npm install    # 安装组件</p></blockquote><p><strong>启动本地服务器及进行预览</strong></p><blockquote><p>hexo g   # 生成页面<br>hexo s   # 启动预览</p></blockquote><p>访问 <a href="http://localhost:4000，">http://localhost:4000，</a> 出现 Hexo 默认页面，本地博客安装成功！</p><h2 id="6-部署-Hexo-到-Github-Pages"><a href="#6-部署-Hexo-到-Github-Pages" class="headerlink" title="6. 部署 Hexo 到 Github Pages"></a>6. 部署 Hexo 到 Github Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p><p>首先安装 hexo-deployer-git：</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>执行 <code>hexo g -d</code>部署静态页面至 Github Pages.</p><p>如果成功,此时通过<code>https://yonghuming.github.io/</code> 会出现 Hexo 默认页面.</p><h2 id="7-部署-源文件到-Github-Pages"><a href="#7-部署-源文件到-Github-Pages" class="headerlink" title="7. 部署 源文件到 Github Pages"></a>7. 部署 源文件到 Github Pages</h2><blockquote><p>突然发现 github pages 仓库中没有 hexo-source 分支,才想起还没有将本地 git pull 到 github 上,按理说此步骤可以提前至创建分支那一步.</p></blockquote><p>先查看本地分支和远程仓库分支,发现本地和远程不一致,本地存在我创建的 hexo-source 分支</p><blockquote><p>git branch -a</p></blockquote><p>将本地创建的分支 push 到 github 仓库,两个 hexo-source,一个是本地名,一个是远程仓库里的命名.</p><blockquote><p>git push origin hexo-source:hexo-source</p></blockquote><p>由于有部分是 Hexo 初始化的文件,不需要上传,可以过滤掉.打开 <code>.gitignore</code>文件,选择 过滤的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure><p>将本地的源文件 push 到 github 仓库.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;hexo source post&#x27; # 引号内是描述</span><br><span class="line">git push origin hexo-source  # hexo-source 是分支名</span><br></pre></td></tr></table></figure><p>注意：如果是通过 git clone 下载配置的主题， push 源文件时需要将主题的 <code>.git</code>文件夹删除或改名备份。</p><h2 id="8-更换主题"><a href="#8-更换主题" class="headerlink" title="8. 更换主题"></a>8. 更换主题</h2><p>在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：</p><blockquote><p>主题链接: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>我所用的  NexT主题说明文档: <a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a></p></blockquote><h2 id="9-发布文章"><a href="#9-发布文章" class="headerlink" title="9. 发布文章"></a>9. 发布文章</h2><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p><blockquote><p>hexo new “My New Post”</p></blockquote><p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p><p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</p><blockquote><p>hexo g   # 生成页面<br>hexo d   # 部署发布</p></blockquote><p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure><h2 id="10-常见命令"><a href="#10-常见命令" class="headerlink" title="10. 常见命令"></a>10. 常见命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/60578464#:~:text=%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%89%201%20%E5%87%86%E5%A4%87%202%20%E8%BF%9E%E6%8E%A5%20Github....,Hexo%20%E5%88%B0%20GitHub%20Pages%206%20%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89....%207%20%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li><li><a href="https://github.com/s1mplecc/ghost-to-hexo-migrater"> s1mplecc 的 ghost-to-hexo-migrater 项目</a></li><li><a href="https://www.jianshu.com/p/8814ce1da7a4">使用git分支保存hexo博客源码到github</a></li></ul>]]></content>
    
    
    <summary type="html">应朋友之邀写的博客搭建教程</summary>
    
    
    
    <category term="网站建设" scheme="https://www.flamingo-sky.com/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/"/>
    
    <category term="Hexo 博客" scheme="https://www.flamingo-sky.com/categories/%E7%BD%91%E7%AB%99%E5%BB%BA%E8%AE%BE/Hexo-%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo 博客" scheme="https://www.flamingo-sky.com/tags/Hexo-%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="搭建环境" scheme="https://www.flamingo-sky.com/tags/%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/"/>
    
  </entry>
  
</feed>

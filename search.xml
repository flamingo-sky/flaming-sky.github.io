<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何使用 Github + Hexo 搭建博客</title>
    <url>/2021/03/13/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%20Github%20+%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>搭建初衷：记录自己的学习笔记。</p>
</blockquote>
<blockquote>
<p>Github Pages 上搭建博客的弊端：</p>
<ol>
<li>部署在 Github 上，需要科学上网</li>
<li>整个流程：撰写 md 文档 ——&gt; Hexo 生成静态网页 ——&gt; 部署到Github Pages ——&gt;  浏览</li>
<li>维护一个静态网站，需要有容灾和备份的意识和能力。</li>
</ol>
</blockquote>
<span id="more"></span>

<h1 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h1><h2 id="1-环境搭建"><a href="#1-环境搭建" class="headerlink" title="1. 环境搭建"></a>1. 环境搭建</h2><p>Hexo 基于 Node.js，搭建过程中还需要使用 npm（Node.js 已带） 和 git，因此先搭建本地操作环境，安装 Node.js 和 Git。</p>
<ul>
<li>Node.js：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a></li>
<li>Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li>
</ul>
<p>下载 Node.js 和 Git 程序并安装，一路点 “下一步” 按默认配置完成安装。</p>
<p>安装完成后，Win+R 输入 cmd 并打开，依次输入 node -v、npm -v 和 git –version 并回车，如下图出现程序版本号即可<br><img src="https://cdn.jsdelivr.net/gh/cs-cshi/image-host/hexo-blog/version.png" alt="version"></p>
<h2 id="2-连接博客"><a href="#2-连接博客" class="headerlink" title="2. 连接博客"></a>2. 连接博客</h2><p>使用邮箱注册 GitHub 账户，选择免费账户（Free），并完成邮件验证。</p>
<p>右键 -&gt; Git Bash Here，<strong>设置用户名和邮箱</strong>：</p>
<blockquote>
<p>git config –global user.name “GitHub 用户名”<br>git config –global user.email “GitHub 邮箱”</p>
</blockquote>
<p><strong>创建 SSH 密匙</strong></p>
<blockquote>
<p>输入 ssh-keygen -t rsa -C “GitHub 邮箱”，然后一路回车。</p>
</blockquote>
<p><strong>添加密匙</strong>：</p>
<p>进入 [C:\Users\用户名.ssh] 目录（要显示隐藏文件，如果路径不对可以看上一步 <code>创建 SSH 密钥</code>时的输出内容，会有路径信息），打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p><strong>验证连接</strong>：</p>
<blockquote>
<p>打开 Git Bash，输入 ssh -T <a href="mailto:&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;">&#x67;&#105;&#116;&#64;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#46;&#99;&#111;&#109;</a> 出现 “Are you sure……”，输入 yes 回车确认</p>
</blockquote>
<blockquote>
<p>显示 “Hi xxx! You’ve successfully……” 即连接成功。</p>
</blockquote>
<h2 id="3-创建-Github-pages-仓库"><a href="#3-创建-Github-pages-仓库" class="headerlink" title="3. 创建 Github pages 仓库"></a>3. 创建 Github pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>
<ul>
<li>Repository name 中输入：用户名.github.io</li>
<li>勾选 Add a README file，会自动设置分支（分支名设置成master）：This will set  master as the default branch.</li>
<li>create repository</li>
</ul>
<h2 id="4-创建保存源码的分支"><a href="#4-创建保存源码的分支" class="headerlink" title="4. 创建保存源码的分支"></a>4. 创建保存源码的分支</h2><p>GitHub Pages 会自动部署静态网页文件，并将 master 分支作为部署的默认分支。为将静态网页和源文件（包含文章、主题等）分离开，强烈建议创建新分支，这样 master 分支只用来发布静态网页，而文档编辑和 Hexo 操作都在另一个分支上完成。</p>
<p>打开博客所在本地的目录，右键 -&gt; Git Bash Here，将 git 仓库 clone 至本地：</p>
<blockquote>
<p>git clone <a href="https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E7%94%A8%E6%88%B7%E5%90%8D.github.io.git">https://github.com/用户名/用户名.github.io.git</a></p>
</blockquote>
<p>cd 命令进入仓库目录,再创建本地分支：</p>
<blockquote>
<p>git checkout -b hexo-source     # hexo-source 是我的分支名</p>
</blockquote>
<p>切换到新建分支(hexo-source是我的分支名)</p>
<blockquote>
<p>git checkout -b hexo-source</p>
</blockquote>
<p>查看本地分支(windows),此时 hexo-source 分支应该是高亮(当前分支)</p>
<blockquote>
<p>git branch -l</p>
</blockquote>
<h2 id="5-本地安装-Hexo-博客程序"><a href="#5-本地安装-Hexo-博客程序" class="headerlink" title="5. 本地安装 Hexo 博客程序"></a>5. 本地安装 Hexo 博客程序</h2><p>由于只能在空文件夹中生成 Hexo 项目,所以我们先将 <code>.git</code> 以及其他文件(如 <code>README.MD</code>)移出去,完成初始化后再移回来.</p>
<p>** 安装 Hexo **</p>
<blockquote>
<p>npm install -g hexo-cli</p>
</blockquote>
<p><strong>Hexo 初始化和本地预览</strong><br>初始化并安装所需组件：</p>
<blockquote>
<p>hexo init      # 初始化<br>npm install    # 安装组件</p>
</blockquote>
<p><strong>启动本地服务器及进行预览</strong></p>
<blockquote>
<p>hexo g   # 生成页面<br>hexo s   # 启动预览</p>
</blockquote>
<p>访问 <a href="http://localhost:4000，">http://localhost:4000，</a> 出现 Hexo 默认页面，本地博客安装成功！</p>
<h2 id="6-部署-Hexo-到-Github-Pages"><a href="#6-部署-Hexo-到-Github-Pages" class="headerlink" title="6. 部署 Hexo 到 Github Pages"></a>6. 部署 Hexo 到 Github Pages</h2><p>本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>
<p>首先安装 hexo-deployer-git：</p>
<blockquote>
<p>npm install hexo-deployer-git –save</p>
</blockquote>
<p>然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>执行 <code>hexo g -d</code>部署静态页面至 Github Pages.</p>
<p>如果成功,此时通过<code>https://yonghuming.github.io/</code> 会出现 Hexo 默认页面.</p>
<h2 id="7-部署-源文件到-Github-Pages"><a href="#7-部署-源文件到-Github-Pages" class="headerlink" title="7. 部署 源文件到 Github Pages"></a>7. 部署 源文件到 Github Pages</h2><blockquote>
<p>突然发现 github pages 仓库中没有 hexo-source 分支,才想起还没有将本地 git pull 到 github 上,按理说此步骤可以提前至创建分支那一步.</p>
</blockquote>
<p>先查看本地分支和远程仓库分支,发现本地和远程不一致,本地存在我创建的 hexo-source 分支</p>
<blockquote>
<p>git branch -a</p>
</blockquote>
<p>将本地创建的分支 push 到 github 仓库,两个 hexo-source,一个是本地名,一个是远程仓库里的命名.</p>
<blockquote>
<p>git push origin hexo-source:hexo-source</p>
</blockquote>
<p>由于有部分是 Hexo 初始化的文件,不需要上传,可以过滤掉.打开 <code>.gitignore</code>文件,选择 过滤的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure>

<p>将本地的源文件 push 到 github 仓库.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;hexo source post&#x27; # 引号内是描述</span><br><span class="line">git push origin hexo-source  # hexo-source 是分支名</span><br></pre></td></tr></table></figure>

<p>注意：如果是通过 git clone 下载配置的主题， push 源文件时需要将主题的 <code>.git</code>文件夹删除或改名备份。</p>
<h2 id="8-更换主题"><a href="#8-更换主题" class="headerlink" title="8. 更换主题"></a>8. 更换主题</h2><p>在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题：</p>
<blockquote>
<p>主题链接: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>我所用的  NexT主题说明文档: <a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a></p>
</blockquote>
<h2 id="9-发布文章"><a href="#9-发布文章" class="headerlink" title="9. 发布文章"></a>9. 发布文章</h2><p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>
<blockquote>
<p>hexo new “My New Post”</p>
</blockquote>
<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。</p>
<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。</p>
<blockquote>
<p>hexo g   # 生成页面<br>hexo d   # 部署发布</p>
</blockquote>
<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World # 标题</span><br><span class="line">date: 2019/3/26 hh:mm:ss # 时间</span><br><span class="line">categories: # 分类</span><br><span class="line">- Diary</span><br><span class="line">tags: # 标签</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">摘要</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure>

<h2 id="10-常见命令"><a href="#10-常见命令" class="headerlink" title="10. 常见命令"></a>10. 常见命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/60578464#:~:text=%E4%BD%BF%E7%94%A8%20Hexo%2BGitHub%20%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%85%8D%E8%B4%B9%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B%EF%BC%88%E5%B0%8F%E7%99%BD%E5%90%91%EF%BC%89%201%20%E5%87%86%E5%A4%87%202%20%E8%BF%9E%E6%8E%A5%20Github....,Hexo%20%E5%88%B0%20GitHub%20Pages%206%20%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89....%207%20%E5%BC%80%E5%A7%8B%E4%BD%BF%E7%94%A8">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a></li>
<li><a href="https://github.com/s1mplecc/ghost-to-hexo-migrater"> s1mplecc 的 ghost-to-hexo-migrater 项目</a></li>
<li><a href="https://www.jianshu.com/p/8814ce1da7a4">使用git分支保存hexo博客源码到github</a></li>
</ul>
]]></content>
      <categories>
        <category>网站建设</category>
        <category>Hexo 博客</category>
      </categories>
      <tags>
        <tag>Hexo 博客</tag>
        <tag>搭建环境</tag>
      </tags>
  </entry>
</search>
